version: '3.9'
services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    restart: always
    ports:
      - "3333:3333"
    environment:
      - NODE_ENV=production
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - ./dist/app/dist
    networks:
      - elios_network

  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    restart: always
    command: [ "node", "dist/main-worker.js" ]
    environment:
      - NODE_ENV=production
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - ./dist:/app/dist
    networks:
      - elios_network

  postgres:
    image: postgres
    restart: always
    ports:
      - '5444:5432'
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - elios_network

  redis:
    image: 'redis/redis-stack:latest'
    restart: always
    ports:
      - '6379:6379'
      - '8350:8001'
    volumes:
      - redis_data:/data
    networks:
      - elios_network

networks:
  elios_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
